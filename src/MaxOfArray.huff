
/** 
 *  MAX_OF_ARRAY HUFF EXERCISE
 *  
 *  In this task, Given an abi encoded array of uint256, return its maximum value. Revert if the array is empty.
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function maxOfArray(uint256[]) payable returns(uint256)

#define macro MAIN() = takes(0) returns(0) {
    0x00                    // [0]
    calldataload            // [calldata]
    0xE0                    // [224, calldata]
    shr                     // [sig]
    __FUNC_SIG(maxOfArray)  // [maxOfArray, sig]
    eq                      // [maxOfArray==sig]
    moa_spot                // [moa_spot. maxOfArray==sig]
    jumpi                   // []

    revert_spot:
        0x00                // [0]
        0x00                // [0, 0]
        revert              // []

    moa_spot:               // []
        0x04                // [4]
        calldataload        // [offset]
        0x04                // [4, offset]
        add                 // [offset+4]
        dup1                // [offset+4, offset+4]
        0x20                // [32, offset+4, offset+4]
        add                 // [offset+36, offset+4]
        swap1               // [offset+4, offset+36]
        calldataload        // [length, offset+36]
        dup1                // [length, length, offset+36]
        iszero              // [length==0, length, offset+36]
        revert_spot         // [revert_spot, length==0, length, offset+36]
        jumpi               // [length, offset+36]
        0x00                // [i, length, offset+36]
        0x00                // [max, i, length, offset+36]

        loop_spot:          // [max, i, length, offset+36]
            dup2            // [i, 32, max, i, length, offset+36]
            0x20            // [32, i, max, i, length, offset+36]
            mul             // [32*i, max, i, length, offset+36]
            dup5            // [offset+36, 32*i, max, i, length, offset+36]
            add             // [(offset+36)+(32*i), max, i, length, offset+36]
            calldataload    // [arr[i], max, i, length, offset+36]
            dup2            // [max, arr[i], max, i, length, offset+36]
            dup2            // [arr[i], max, arr[i], max, i, length, offset+36]
            gt              // [arr[i]>max, arr[i], max, i, length, offset+36]
            iszero          // [!(arr[i]>max), arr[i], max, i, length, offset+36]
            pop_spot        // [pop_spot, !(arr[i]>max), arr[i], max, i, length, offset+36]
            jumpi           // [arr[i], max, i, length, offset+36]
            swap1           // [max, arr[i], i, length, offset+36]

            pop_spot:       // [arr[i], max, i, length, offset+36]
                pop         // [max, i, length, offset+36]

            swap1           // [i, max, length, offset+36]
            0x01            // [1, i, max, length, offset+36]
            add             // [1+=i, max, length, offset+36]
            swap1           // [max, i, length, offset+36]
            dup3            // [length, max, i, length, offset+36]
            dup3            // [i, length, max, i, length, offset+36]
            lt              // [i<length, max, i, length, offset+36]
            loop_spot       // [loop_spot, i<length, max, i, length, offset+36]
            jumpi           // [max, i, length, offset+36]

        0x00                // [0, max, i, length, offset+36]
        mstore              // [i, length, offset+36]
        0x20                // [32, i, length, offset+36]
        0x00                // [0, 32, i, length, offset+36]
        return              // [i, length, offset+36]
}