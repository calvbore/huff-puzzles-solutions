
/** 
 *  ADD HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like addition etc
 *  
 *  The task is to write within the `MAIN` macro below, a function that takes in a uint256, adds 1 to it and returns the new value
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function add1(uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    0x00             // [0]
    calldataload     // [calldata]
    0xE0             // [224, calldata]
    shr              // [sig]
    __FUNC_SIG(add1) // [add1, sig]
    eq               // [add1==sig]
    add1             // [add1,add1==sig]
    jumpi            // []

    0x00             // [0]
    0x00             // [0,0]
    revert           // []

    add1:
        0x04          // [4]
        calldataload  // [num]
        0x01          // [1,num]
        add           // [1+num]
        0x00          // [0,1+num]
        mstore        // []
        0x20          // [32]
        0x00          // [0,32]
        return        // []
}