
/** 
 *  SUM_ARRAY HUFF EXERCISE
 *
 *  
 *  The task is to write within the `MAIN` macro below, write a functionality that takes an array of uint256 as an argument and returns the sum of all the numbers
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function sumArray(uint256[]) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    0x00                    // [0]
    calldataload            // [calldata]
    0xE0                    // [224,calldata]
    shr                     // [sig]
    __FUNC_SIG(sumArray)    // [sumArray,sig]
    eq                      // [sumArray==sig]
    sum_arr_spot            // [sum_arr_spot,sumArray==sig]
    jumpi                   // []
    0x20                    // [32]
    0x00                    // [0]
    revert                  // []

    sum_arr_spot:
        0x04                // [4]
        calldataload        // [offset]
        0x04                // [4, offset]
        add                 // [offset+4]
        calldataload        // [length]
        0x00                // [i, length]
        0x00                // [total, i, length]
        loop_spot           // [loop_spot, total, i, length]
        jump                // [total, i, length]

        loop_spot:          // [total, i, length]
            dup2            // [i, total, i, length]
            0x20            // [32, i, total, i, length]
            mul             // [i*32, total, i. length]
            0x44            // [68, i*32, total, i. length]
            add             // [68+i*32, total, i. length]
            calldataload    // [arr[i], total, i, length]
            add             // [total+=arr[i], i, length]
            swap1           // [i, total, length]
            0x01            // [1, i, total, length]
            add             // [i+=1, total, length]
            swap1           // [total, i, length]
            dup3            // [length, total, i, length]
            dup3            // [i, length, total, i, length]
            lt              // [i<length, total, i, length]
            loop_spot       // [loop_spot, i<length, total, i, length]
            jumpi           // [total, i, length]

        0x00                // [0, total, i, length]
        mstore              // [i, length]
        0x20                // [32, i, length]
        0x00                // [0, 32, i, length]
        return              // [i, length]
}