/** 
 *  BASIC_BANK HUFF EXERCISE
 *  
 *  The task is to create a basic bank with huff
 * functionalities include
 *      - depositing tokens via similar to how solidity's `receive` function works
 *      - withdrawing tokens
 *      - keeping track of and viewing balance
 */

#define function balanceOf(address) payable returns(uint256)
#define function withdraw(uint256) payable returns()

#define macro MAIN() = takes(0) returns(0) {
    0x00                        // [0]
    calldataload                // [calldata]
    0xE0                        // [224,calldata]
    shr                         // [sig]
    dup1                        // [sig,sig]

    __FUNC_SIG(balanceOf)       // [balanceOf,sig,sig]
    eq                          // [balanceOf==sig,sig]
    balanceOf_spot              // [balanceOf_spot,balanceOf==sig,sig]
    jumpi                       // [sig]
    
    __FUNC_SIG(withdraw)        // [withdraw,sig]
    eq                          // [withdraw==sig]
    withdraw_spot               // [withdraw_spot,withdraw==sig]
    jumpi                       // []

    caller                      // [caller]
    sload                       // [oldvalue]
    callvalue                   // [newvalue,oldvalue]
    add                         // [totalvalue]
    caller                      // [caller, totalvalue]
    sstore                      // []
    stop                        // []

    balanceOf_spot:
        0x04                    // [4]
        calldataload            // [address]
        sload                   // [value]
        0x00                    // [0, value]
        mstore                  // []
        0x20                    // [32]
        0x00                    // [0,32]
        return                  // []

    withdraw_spot:
        0x04                    // [4]
        calldataload            // [amount]
        dup1                    // [amount,amount]
        caller                  // [caller,amount,amount]
        sload                   // [deposits,amount,amount]
        swap1                   // [amount,deposits,amount]
        dup2                    // [deposits,amount,deposits,amount]
        dup2                    // [amount,deposits,amount,deposits,amount]
        dup2                    // [deposits,amount,deposits,amount,deposits,amount]
        gt                      // [deposits>amount,deposits,amount,deposits,amount]
        swap2                   // [amount,deposits,deposits>amount,deposits,amount]
        eq                      // [amount==deposits,deposits>amount,deposits,amount]
        or                      // [(amount==deposits)|(deposits>amount),deposits,amount]
        send_spot               // [send_spot,(amount==deposits)|(deposits>amount),deposits,amount]
        jumpi                   // [deposits,amount]
        0x00                    // [0,deposits,amount]
        0x00                    // [0,0,deposits,amount]
        revert                  // [deposits,amount]

        send_spot:              // [deposits,amount]
            dup2                // [amount,deposits,amount]
            swap1               // [deposits,amount,amount]
            sub                 // [deposits-amount,amount]
            caller              // [caller,deposits-amount,amount]
            sstore              // [amount]
            
            0x00                // [0,amount]
            0x00                // [0,0,amount]
            0x00                // [0,0,0,amount]
            0x00                // [0,0,0,0,amount]
            swap4               // [amount,0,0,0,0]
            caller              // [caller,amount,0,0,0,0]
            gas                 // [gas,caller,amount,0,0,0,0]
            call                // [true|false]
            stop 
}
