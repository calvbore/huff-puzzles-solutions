
/** 
 *  MULTIPLY HUFF EXERCISE
 *
 *  When writing solidity, we most times have to perform some mathematical operations like multiplication etc
 *  
 *  The task is to write within the `MAIN` macro below, a function named `multiply` that takes in 2 uint256s, and returns their product. Be sure to revert on overflow
 *
 *  NOTICE: The contract should revert when an unrecognized function is called
 */

#define function multiply(uint256, uint256) payable returns(uint256)


#define macro MAIN() = takes(0) returns(0) {
    0x00                // [0]
    calldataload        // [calldata]
    0xE0                // [224,calldata]
    shr                 // [sig]
    __FUNC_SIG(multiply)// [mul,sig]
    eq                  // [mul==sig]
    multiply            // [mul, mull==sig]
    jumpi               // []

    0x00                // [0]
    0x00                // [0,0]
    revert              // []

    multiply:
        0x04            // [4]
        calldataload    // [arg0]
        0x24            // [36, arg0]
        calldataload    // [arg1, arg0]
        dup2            // [arg0, arg1, arg0]
        dup2            // [arg1, arg0, arg1, arg0]
        mul             // [sum, arg1, arg0]
        dup1            // [sum, sum, arg1, arg0]
        0x00            // [0, sum, sum, arg1, arg0]
        mstore          // [sum, arg1, arg0]
        div             // [sum//arg1, arg0]
        eq              // [sum//arg1==arg0]
        iszero
        underflow       // [underflow, !(sum//arg1)==arg0]
        jumpi           // []
        0x20            // [32]
        0x00            // [0,32]
        return          // []

    underflow:
        0x20            // [32]
        0x00            // [0,32]
        revert          // []

}